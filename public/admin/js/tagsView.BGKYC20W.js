import{bd as e,r as i}from"./index.BRpw1nKc.js";const n=e("tagsView",(()=>{const e=i([]),n=i([]);function l(i){e.value.some((e=>e.fullPath===i.fullPath))||(i.affix?e.value.unshift(i):e.value.push(i))}function u(e){const i=e.name;n.value.includes(i)||e.keepAlive&&n.value.push(i)}function a(i){return new Promise((n=>{for(const[l,u]of e.value.entries())if(u.path===i.path){e.value.splice(l,1);break}n([...e.value])}))}function t(e){const i=e.name;return new Promise((e=>{const l=n.value.indexOf(i);l>-1&&n.value.splice(l,1),e([...n.value])}))}function s(i){return new Promise((n=>{e.value=e.value.filter((e=>(null==e?void 0:e.affix)||e.path===i.path)),n([...e.value])}))}function r(e){const i=e.name;return new Promise((e=>{const l=n.value.indexOf(i);n.value=l>-1?n.value.slice(l,l+1):[],e([...n.value])}))}return{visitedViews:e,cachedViews:n,addVisitedView:l,addCachedView:u,delVisitedView:a,delCachedView:t,delOtherVisitedViews:s,delOtherCachedViews:r,updateVisitedView:function(i){for(let n of e.value)if(n.path===i.path){n=Object.assign(n,i);break}},addView:function(e){l(e),u(e)},delView:function(i){return new Promise((l=>{a(i),t(i),l({visitedViews:[...e.value],cachedViews:[...n.value]})}))},delOtherViews:function(i){return new Promise((l=>{s(i),r(i),l({visitedViews:[...e.value],cachedViews:[...n.value]})}))},delLeftViews:function(i){return new Promise((l=>{const u=e.value.findIndex((e=>e.path===i.path));-1!==u&&(e.value=e.value.filter(((e,i)=>{if(i>=u||(null==e?void 0:e.affix))return!0;const l=n.value.indexOf(e.name);return l>-1&&n.value.splice(l,1),!1})),l({visitedViews:[...e.value]}))}))},delRightViews:function(i){return new Promise((n=>{const l=e.value.findIndex((e=>e.path===i.path));-1!==l&&(e.value=e.value.filter(((e,i)=>{if(i<=l||(null==e?void 0:e.affix))return!0})),n({visitedViews:[...e.value]}))}))},delAllViews:function(){return new Promise((i=>{const l=e.value.filter((e=>null==e?void 0:e.affix));e.value=l,n.value=[],i({visitedViews:[...e.value],cachedViews:[...n.value]})}))},delAllVisitedViews:function(){return new Promise((i=>{const n=e.value.filter((e=>null==e?void 0:e.affix));e.value=n,i([...e.value])}))},delAllCachedViews:function(){return new Promise((e=>{n.value=[],e([...n.value])}))}}}));export{n as u};
